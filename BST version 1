package treeTester;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Hashtable;



public class BST {
	

 // Root of BST
 Word root;
 Word left;
 Word right;
 
 
 
 // Constructor
 BST() { root = null; }

 BST(Word value) 
 {
	 this.root = value;
	 //root = new Word(value.getValue(), value.getCountYT(), value.getCountPT()); 
	 
 }

 
/*
 void insert(Word newWord)
 {	 
	 if (this.root == null)
	 {		 
		 this.root = newWord;
		// System.out.println("Root was null, new root is: " + this.root.getValue());
	 }
	 else
	 {
	//	 System.out.println("new root is: " + this.root.getValue());
		 insertRec(this.root, newWord);
	 } 
 }

 
 Word insertRec(Word newRoot, Word toInsert)
 {
	// System.out.println("Want to insert: " + toInsert.getValue());
	
	 if (newRoot!= null)
	 {
		// System.out.println("NOT NULL Currently at: " + newRoot.getValue());
		 if(newRoot.getValue().compareTo(toInsert.getValue()) > 0)
		 {
			// System.out.println("Root of: " + newRoot.getValue() + " has been detected as greater than: " + toInsert.getValue());
			 newRoot.setLeft(insertRec(newRoot.getLeft(), toInsert));	
		 }
	 }
	 if (newRoot == null)
	 {
	//	 System.out.println("Inserting: " + toInsert.getValue());
		 return toInsert;
	 }
	 
	 if (newRoot.getValue().compareTo(toInsert.getValue()) < 0) 
	 {
		// System.out.println("Root of: " + newRoot.getValue() + " has been detected as less than: " + toInsert.getValue());
		 newRoot.setRight(insertRec(newRoot.getRight(), toInsert));	 
	 }
	 else if (root.getValue().compareTo(toInsert.getValue()) > 0 || root.getValue().compareTo(toInsert.getValue()) == 1) 
	 {
		// System.out.println("Root of: " + newRoot.getValue() + " has been detected as greater than: " + toInsert.getValue());
		 newRoot.setLeft(insertRec(newRoot.getLeft(), toInsert));	 
	 }else if (newRoot.getValue().compareTo(toInsert.getValue()) == 0) 
	 {	 
		// System.out.println("Duplicate detected");	 
	 }

	 return newRoot;
 }
*/
 
	 void inorder() { 
		 
	System.out.println("Printing tree with this root: " + this.root.getValue());	
	//System.out.println(this.root.thisTree);
	
	
		 //inorderRec(this.root); 
		 
	 }

 
  
  /*
 void inorderRec(Word root)
 {
	 String s = "";
     if (root == null) { 
     return;
     }else if (root != null)
     {
    	 inorderRec(root.getLeft());
         System.out.println(root.getValue());
         inorderRec(root.getRight());
   }
  
 }

 */
 
 public void listEqualities(Word root)
 {
	 
	 File file = new File("similarities.txt");
		FileWriter writer = null;
		try {
			writer = new FileWriter(file);		
			String insert = "";// root.printTree(root, 1);
			System.out.println("Insert is: " + insert);
			writer.write(insert);
			writer.close();
		}catch (IOException e) {System.out.println("File cannot be generated");}
 }
 
 
 public void listDifferences(Word root)
 {
	 
	 File file2 = new File("differences.txt");
		FileWriter writer2 = null;
		try {
			writer2 = new FileWriter(file2);		
			String insert = "";//root.printTree(root, 2);
			System.out.println("Insert is: " + insert);
			writer2.write(insert);
			writer2.close();
		}catch (IOException e) {System.out.println("File cannot be generated");}
 }
 
 static ArrayList<Word> array = new ArrayList<Word>();
 static ArrayList<Word> doneWords = new ArrayList<Word>();
 static ArrayList<Character> doneLetters = new ArrayList<Character>();
 static Hashtable<Integer, Word> treeTable = new Hashtable<Integer, Word>();
 
 static int previousKey = 0;
 static int repetition = 0;
 static int key = 0;
 
 static char currentLetter;
 public static boolean treeTabler(ArrayList<Word> passedWords, int currentKey)
 {
	 
	 
	 if((currentKey == passedWords.size()))
	 {
		 for (int i = 0; i < doneWords.size(); i++)
			{
				doneWords.get(0).addToList(doneWords.get(i));				
			}				
		 char c = doneWords.get(0).getValue().charAt(0);
		 doneLetters.add(c);
		 treeAdder(doneWords);
		 
		 System.out.println("Clearing doneWords1: ");
			for (int i = 0; i < doneWords.size(); i++)
			{
				System.out.print(", " + doneWords.get(i).getValue() + " ");
			}
			System.out.println("\n");
			firstWords.add(doneWords.get(0));
		 doneWords.clear();
		 return false;
	 }
	 
	 
	 key = passedWords.get(currentKey).getKey();//get key for table.get(i).get(j) word

	 if (previousKey != key && repetition != 0)
		{			
			for (int i = 0; i < doneWords.size(); i++)
			{
				doneWords.get(0).addToList(doneWords.get(i));				
			}
			
			if (doneLetters.contains(passedWords.get(currentKey).getValue().charAt(0)))
			{
				System.out.println("Repeating word detected");
			}
			
			
			//Collections.sort(doneWords);
			char c = doneWords.get(0).getValue().charAt(0);
			doneLetters.add(c);
			treeAdder(doneWords);
			
			System.out.println("Clearing doneWords2: ");
			for (int i = 0; i < doneWords.size(); i++)
			{
				System.out.print(", " + doneWords.get(i).getValue() + " ");
			}
			System.out.println("\n");
			firstWords.add(doneWords.get(0));
			doneWords.clear();
			
		}
	 
	 	previousKey = key;
		
		Word w = passedWords.get(currentKey);	
		
		System.out.println("Adding: " +  w.getValue() + " to donewords");
		 
		doneWords.add(w);
		repetition++;		
		treeTabler(passedWords, (currentKey + 1));
		return true;
 }
 
 
 static ArrayList<Word> firstWords = new ArrayList<Word>();
 
 
 
 public static void treeAdder (ArrayList<Word> letterGroup)
 {	 
	 Word root = letterGroup.get(0);
	 System.out.println("Root word is: " + root.getValue());
	 System.out.println("Adding to key: " + letterGroup.get(0).getKey());

	 for (int i = 0; i < letterGroup.size(); i++)
	 {
		 root.insertRec(letterGroup.get(i));
	 }	 	 
	 treeTable.put(letterGroup.get(0).getKey(), root);	 
 }
 
 
 
 public static void treePrinter()
 {	 
	 for (int i = 0; i < 135; i++)
	 {
			 if (treeTable.get(i) != null)
			 {
				 (treeTable.get(i)).inorderRec(treeTable.get(i));
				 System.out.println("NEXT TREE:");
			 }						 
		
		
	 }
	 
 }
 
 
 
 
 
 

	
	
	
	
	
 public static void main(String[] args)  {

		Word a = new Word("a", 3, 5);
		array.add(a);		
		
		Word able = new Word("able", 37, 535);
		array.add(able);
		
		Word about = new Word("about", 43,43);
		array.add(about);
		
		Word acts = new Word("acts", 6, 7);
		array.add(acts);

		Word actually = new Word("actually", 7, 7);
		array.add(actually);
	
		Word ad = new Word("ad", 4, 7);
		array.add(ad);

		Word adamant = new Word("adamant", 69, 70);
		array.add(adamant);		
		
		Word addition = new Word("addition", 2 , 3);
		array.add(addition);		
		
		Word after = new Word("after", 2 , 3);
		array.add(after);
				
		Word dwz = new Word("dwz", 3, 1);
		array.add(dwz);

		Word dwayne = new Word("dwayne", 5, 5);
		array.add(dwayne);
			
		Word celine = new Word("celine", 5, 5);
		array.add(celine);
		
		Word carly = new Word("carly", 5, 5);
		array.add(carly);
		
		Word farhad = new Word("farhad", 5, 5);
		array.add(farhad);
		
		
		
		BST Tree = new BST();
		
		//Tree.insert(a);
	//	Tree.insert(able);	
	//	Tree.insert(acts);
	//	Tree.insert(actually);
	//	Tree.insert(ad);
	//	Tree.insert(addition);
	//	Tree.insert(after);
	//	Tree.insert(about);
	//	Tree.insert(dwayne);
	//	Tree.insert(adamant);
	//	Tree.insert(dwz);
	//	Tree.insert(dwayne);
		
	//	Tree.inorder();
		
		//System.out.println("Root is: " + Tree.root.getValue());
		//System.out.println("acts left is: "  + acts.getLeft() + " And his right is: " + acts.getRight());
		
		Tree.treeTabler(array, 0);
		
		Tree.treePrinter();
		
		System.out.println(treeTable);
		
		
 }
 
 
 
 
