import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;


public class tester {


	
	static int version = 0;
	public static void main(String[] args)  {

		Word arnold = new Word("arnold", 3, 5);
		array.add(arnold);		
		
		Word aaron = new Word("aaron", 37, 535);
		array.add(aaron);
		
		Word bethany = new Word("bethany", 69, 69);
		array.add(bethany);
		
		Word demarcus = new Word("demarcus", 34, 5);
		array.add(demarcus);
		
		Word desmond = new Word("desmond", 2, 8);
		array.add(desmond);
		
		Word dwayne = new Word("dwayne", 5, 5);
		array.add(dwayne);
		
		Word jason = new Word("jason", 37, 15);
		array.add(jason);
		
		Word shane = new Word("shane", 32, 32);
		array.add(shane);
				
		Word victor = new Word("victor", 37, 515);
		array.add(victor);

		Word victoria = new Word("victoria", 54, 54);
		array.add(victoria);
		
		Word vincent = new Word("vincent", 399, 535);
		array.add(vincent);
		
		Word zane = new Word("zane", 45, 34);
		array.add(zane);
		
		Word zophia = new Word("zophia", 0, 57);
		array.add(zophia);
		
		Word zozie = new Word("zozie", 32, 32);
		array.add(zozie);
		
		nameAdder(array, 0);
		
		System.out.println(table);
		
		listDifferences();
		writeSimilarities();
	}
	
	static ArrayList<Word> array = new ArrayList<Word>();
	
	static ArrayList<Word> words = new ArrayList<Word>();
	
	static Hashtable<Integer, ArrayList<Word>> table = new Hashtable<Integer, ArrayList<Word>>();
	
	static int previousKey = 0;
	static int repetition = 0;
	static int key = 0;
	
	public static boolean nameAdder(ArrayList<Word> name, int currentKey)
	{
	
		//base case
		if((currentKey == name.size()))
		{
			for (int i = 0; i < words.size(); i++)
			{
				words.get(0).addToList(words.get(i));				
			}
			//System.out.println(words.get(0) + "'s list is: " + words.get(0).thisWordList);
			
			
			table.put(previousKey, words.get(0).thisWordList);
			
			
			//System.out.println("The spot now has: " + table.get(previousKey));
			
			words.clear();
			//System.out.println("I cleared words, now the spot has: " + table.get(previousKey));
			return false;
		}

			key = name.get(currentKey).getKey();//get key for table.get(i).get(j) word


			
			if (previousKey != key && repetition != 0)
			{
				//System.out.println("All these names shoudl start with the same letter: " + words);
				//System.out.println("Adding to: " + previousKey);
				//ArrayList<Word> temp = new ArrayList<Word>();
			
				//ArrayList<Word> temp = table.get(previousKey);
				//temp = words;
				
				for (int i = 0; i < words.size(); i++)
				{
					words.get(0).addToList(words.get(i));				
				}
				
				table.put(previousKey, words.get(0).thisWordList);
				//System.out.println("The spot now has: " + table.get(previousKey));
				
				words.clear();
				//System.out.println("I cleared words, now the spot has: " + table.get(previousKey));
				
				
			}
			
			previousKey = key;
		
			Word w = name.get(currentKey);
			//System.out.println("Next letter name is: " + w.getValue());
			//System.out.println("Name: " + w.getValue() + " Key: " + key);
			//System.out.println("currentKey is: " + currentKey);		
			words.add(w);
			repetition++;
			
			nameAdder(name, (currentKey + 1));

		return true;
	}

	
	static ArrayList<String> diffList = new ArrayList<String>();
	static ArrayList<String> simList = new ArrayList<String>();

	
	
	public static void listDifferences()
	{
		File file = new File("differences.txt");
		FileWriter writer = null;
		try {writer = new FileWriter(file);	
		for (int i = 0; i < 130; i++)
		{
			String add = "";	
			if(table.get(i) != null)
			{
				for(int j = 0; j < table.get(i).size(); j++)
				{
					if (table.get(i).get(j).getCountPT() > table.get(i).get(j).getCountYT())
					{
						String zero = "";
						if (table.get(i).get(j).getCountYT() == 0) {zero = " - ZERO";}
						
						add = table.get(i).get(j).getValue() + "\t\t" + "+" + (table.get(i).get(j).getCountPT() - table.get(i).get(j).getCountYT()) + "PT" + zero+ "\t\t\t\tPT: " + table.get(i).get(j).getCountPT() + " YT:" + table.get(i).get(j).getCountYT();
						diffList.add(add);
					}
					else if (table.get(i).get(j).getCountPT() < table.get(i).get(j).getCountYT())
					{
						String zero = "";
						if (table.get(i).get(j).getCountPT() == 0) {zero = " - ZERO";}
						add = table.get(i).get(j).getValue() + "\t\t" + "+" + (table.get(i).get(j).getCountYT() - table.get(i).get(j).getCountPT()) + "YT" + zero + "\t\t\t\tPT: " + table.get(i).get(j).getCountPT() + " YT:" + table.get(i).get(j).getCountYT();
						diffList.add(add);
					}
				}			
			}
			
		}
		
		
		Collections.sort(diffList);
		
		for (int j = 0; j < diffList.size(); j++)
		{
			writer.write(diffList.get(j));
			writer.write("\n");
		}
		writer.close();
		
		}catch (IOException e) {System.out.println("File cannot be generated");}	
	}
	
	
	
	
	public static void writeSimilarities() {
		
		
		File file = new File("similarities.txt");
		FileWriter writer = null;
		try {writer = new FileWriter(file);	
		for (int i = 0; i < 130; i++)
		{
			String add = "";	
			if(table.get(i) != null)
			{
				for(int j = 0; j < table.get(i).size(); j++)
				{
					if (table.get(i).get(j).getCountPT() == table.get(i).get(j).getCountYT())
					{
						add = table.get(i).get(j).getValue() + "\t\t" + table.get(i).get(j).getCountYT();
						simList.add(add);
					}
				}			
			}
			
		}
		
		
		Collections.sort(simList);
		
		for (int j = 0; j < simList.size(); j++)
		{
			writer.write(simList.get(j));
			writer.write("\n");
		}
		writer.close();
		
		}catch (IOException e) {System.out.println("File cannot be generated");}			
	}		
}


